import { ParamsError } from "~/errors/params-error"
import { loaderClient } from "~/lib/loader-client"
import type { WorkListItemFragment } from "~/routes/($lang)._main.posts._index/components/work-list"
import type {
  HeadersFunction,
  LoaderFunctionArgs,
  MetaFunction,
} from "@remix-run/cloudflare"
import { useParams } from "@remix-run/react"
import { useLoaderData } from "@remix-run/react"
import { type FragmentOf, graphql } from "gql.tada"
import { createMeta } from "~/utils/create-meta"
import { config, META } from "~/config"
import {} from "~/routes/($lang)._main.models.$model/components/ai-model-article"
import {
  AiModelSensitiveArticle,
  ModelSensitiveItemFragment,
} from "~/routes/($lang)._main.models.$model/components/ai-model-sensitive-article"

export async function loader(props: LoaderFunctionArgs) {
  if (props.params.model === undefined) {
    throw new Response(null, { status: 404 })
  }

  const url = new URL(props.request.url)

  const searchParams = new URLSearchParams(url.search)

  const r18g = searchParams.get("r18g") === "1"

  const ratings: ("G" | "R15" | "R18" | "R18G")[] = r18g
    ? ["R18", "R18G"]
    : ["R18"]

  const page = searchParams.get("page")
    ? Number.parseInt(searchParams.get("page") || "1", 10)
    : 0

  const hasPrompt = searchParams.get("prompt") === "1"

  const resp = await loaderClient.query({
    query: aiModelQuery,
    variables: {
      search: props.params.model,
      offset: page * 32,
      limit: 32,
      where: {
        ratings: ratings,
        isSensitive: true,
        hasPrompt: hasPrompt,
        ...(hasPrompt && {
          isPromptPublic: true,
        }),
      },
    },
  })

  if (!resp.data.aiModel) {
    throw new Response(null, { status: 404 })
  }

  return {
    data: resp.data.aiModel,
    page: page,
    isR18G: r18g,
    hasPrompt: hasPrompt,
  }
}

export const headers: HeadersFunction = () => ({
  "Cache-Control": config.cacheControl.oneDay,
})

export const meta: MetaFunction = (props) => {
  if (!props.data) {
    return [{ title: "モデル作品一覧" }]
  }

  const aiModel = props.data as {
    data: {
      id: string
      name: string
      type: "IMAGE" | null
      generationModelId: string | null
      workModelId: string | null
      thumbnailImageURL: string | null
      works: FragmentOf<typeof WorkListItemFragment>[]
    }
  }

  if (!aiModel.data) {
    return [{ title: "モデル作品一覧" }]
  }

  const thumbnailUrl = aiModel.data.thumbnailImageURL
    ? aiModel.data.thumbnailImageURL
    : aiModel.data.works?.length
      ? aiModel.data.works[0].largeThumbnailImageURL
      : ""

  return createMeta(
    META.MODEL,
    {
      title:
        props.params.lang === "en"
          ? `Works generated by the ${aiModel.data.name} model (${aiModel.data.works.length})`
          : `${aiModel.data.name}モデルで生成された作品一覧（${aiModel.data.works.length}件）`,
      description:
        props.params.lang === "en"
          ? `The latest works generated by the ${aiModel.data.name} model are listed here, with prompt information and more`
          : `${aiModel.data.name}モデルで生成された最新の作品一覧です、プロンプト情報など多数掲載されています`,
      url: thumbnailUrl,
    },
    props.params.lang,
  )
}

/**
 * モデルの詳細
 */
export default function ModelPage() {
  const params = useParams()

  if (params.model === undefined) {
    throw new ParamsError()
  }

  const data = useLoaderData<typeof loader>()

  if (data.data === null) {
    throw new ParamsError()
  }

  return (
    <>
      <AiModelSensitiveArticle
        model={data.data}
        isMoreRatings={data.isR18G}
        hasPrompt={data.hasPrompt}
        page={data.page}
      />
    </>
  )
}

export const aiModelQuery = graphql(
  `query AiModel($search: String!, $offset: Int!, $limit: Int!, $where: WorksWhereInput) {
    aiModel(where:{search: $search}) {
      ...ModelItem
    }
  }`,
  [ModelSensitiveItemFragment],
)
